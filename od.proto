syntax = "proto3";

// A dataset covers one region/city
message Dataset {
  // TODO Some stuff to specify the area it covers, the raw data sources, and
  // models used to produce this

  // No two zones may intersect.
  // TODO Maybe we want to enforce that the union of zones partitions some
  // boundary polygon? Except I doubt that census zones usually cover
  // water/parks.
  map<string, Zone> zones = 1;

  repeated OD od_trips = 2;
}

message Zone {
  // The points must represent a simple polygon. The first and last point must
  // match, there must be no holes or self-intersections.

  // TODO We can probably reuse another proto encoding for polygons
  //repeated LatLng points = 1;
}

message OD {
  // Both zones must be defined in the map of zones. The two zones may be the
  // same, representing intra-zone trips.
  string origin_zone = 1;
  string destination_zone = 2;

  Mode mode = 3;
  Purpose purpose = 4;

  uint32 number_trips = 5;

  // TODO Do we want anything about the departure time of these trips?
}

// These represent a single mode.
// TODO Do we want to model multi-modal trips, like driving to a park-and-ride
// and taking transit? Or using an e-scooter for last mile?
enum Mode {
// Human powered modes
  UNKNOWN = 0;
  WALK = 1;
  JOG = 2;
  PUSH_SCOOTER = 3;
  PEDAL_CYCLE = 4;
  PEDAL_CYCLE_PASSENGER = 5;
  ELECTRIC_CYCLE = 6;
  ELECTRIC_CYCLE_PASSENGER = 7;

  // Electric mobility and powered 2 wheelers
  MICROMOBILITY_OTHER = 101;
  ELECTRIC_SCOOTER = 102;
  MOBILITY_SCOOTER = 103;
  MOTORCYCLE = 104;
  MOTORCYCLE_PASSENGER = 105;

  // Public transport
  // Auto rickshaw aka tuk-tuk: https://en.wikipedia.org/wiki/Auto_rickshaw
  PUBLIC_TRANSPORT_OTHER = 201;
  AUTO_RICKSHAW = 202;
  MINIBUS = 203;
  BUS = 204;
  LIGHT_RAIL = 205;
  SUBWAY = 206;
  RAIL_OTHER = 207;

  // Cars/Vans/Goods vehicles
  UNKNOWN_CAR_DRIVER = 301;
  UNKNOWN_CAR_PASSENGER = 302;
  TAXI = 303;
  CARPOOL = 304;
  MICRO_CAR_DRIVER = 305;
  MICRO_CAR_PASSENGER = 306;
  SMALL_CAR_DRIVER = 307;
  SMALL_CAR_PASSENGER = 308;
  MEDIUM_CAR_DRIVER = 309;
  MEDIUM_CAR_PASSENGER = 310;
  LARGE_CAR_DRIVER = 311;
  LARGE_CAR_PASSENGER = 312;
  VAN_DRIVER = 313;
  VAN_PASSENGER = 314;
  TRUCK_DRIVER = 315;
  TRUCK_PASSENGER = 316;
  HEAVY_GOODS_VEHICLE_DRIVER = 317;
  HEAVY_GOODS_VEHICLE_PASSENGER = 318;

  // Other 
  HORSE = 401;
  HORSE_DRAWN_CARRIAGE = 402;
}

// Describes the destination (so on a return trip from work to home, the
// purpose would be Home)
enum Purpose {
  UNKNOWN = 0;
  COMMUTING = 1;
  SHOPPING = 2;
  LEISURE = 3;
  SOCIAL = 4;
  
  // There's a few more of these that seem to be standard in DaySim and such
}
