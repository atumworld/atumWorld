syntax = "proto3";

// A dataset covers one region/city
message Dataset {
  // TODO Some stuff to specify the area it covers, the raw data sources, and
  // models used to produce this

  // No two zones may intersect.
  // TODO Maybe we want to enforce that the union of zones partitions some
  // boundary polygon? Except I doubt that census zones usually cover
  // water/parks.
  map<string, Zone> zones = 1;

  repeated OD od_trips = 2;
}

message Zone {
  // The points must represent a simple polygon. The first and last point must
  // match, there must be no holes or self-intersections.

  // TODO We can probably reuse another proto encoding for polygons
  //repeated LatLng points = 1;
}

message OD {
  // Both zones must be defined in the map of zones. The two zones may be the
  // same, representing intra-zone trips.
  string origin_zone = 1;
  string destination_zone = 2;

  Mode mode = 3;
  Purpose purpose = 4;

  uint32 number_trips = 5;

  // TODO Do we want anything about the departure time of these trips?
}

// These represent a single mode.
// TODO Do we want to model multi-modal trips, like driving to a park-and-ride
// and taking transit? Or using an e-scooter for last mile?
enum Mode {
// Human/animal powered modes
  WALK = 0;
  JOG = 1;
  PUSH_SCOOTER = 2;
  PEDAL_CYCLE = 3;
  PEDAL_CYCLE_PASSENGER = 4;
  ELECTRIC_CYCLE = 5;
  ELECTRIC_CYCLE_PASSENGER = 6;
  HORSE = 7;
  HORSE_DRAWN_CARRIAGE = 8;

  // Electric mobility and 2 wheelers
  MICROMOBILITY_UNKNOWN = 9;
  ELECTRIC_SCOOTER = 10;
  MOBILITY_SCOOTER = 11;
  MOTORCYCLE = 12;
  MOTORCYCLE_PASSENGER = 13;
  // From STATS19
  // Motorcycle - unknown cc 125cc and under 50cc
  // over 125cc up to 500cc Motorcycle over 500cc

  // Public transport
  PUBLIC_TRANSPORT_OTHER = 14;
  // Auto rickshaw aka tuk-tuk: https://en.wikipedia.org/wiki/Auto_rickshaw
  AUTO_RICKSHAW = 15;
  MINIBUS = 16;
  BUS = 17;
  // Travel by tram, tube, metro etc
  LIGHT_RAIL = 18;
  RAIL = 19;

  // Cars/Vans
  UNKNOWN_CAR_DRIVER = 20;
  UNKNOWN_CAR_PASSENGER = 21;
  TAXI = 22;
  CARPOOL = 23;
  MICRO_CAR_DRIVER = 24;
  MICRO_CAR_PASSENGER = 25;
  SMALL_CAR_DRIVER = 26;
  SMALL_CAR_PASSENGER = 27;
  MEDIUM_CAR_DRIVER = 28;
  MEDIUM_CAR_PASSENGER = 29;
  LARGE_CAR_DRIVER = 30;
  LARGE_CAR_PASSENGER = 31;
  VAN_DRIVER = 32;
  VAN_PASSENGER = 33;
  TRUCK_DRIVER = 34;
  TRUCK_PASSENGER = 35;
  HEAVY_GOODS_VEHICLE_DRIVER = 36;
  HEAVY_GOODS_VEHICLE_PASSENGER = 37;
}

// Describes the destination (so on a return trip from work to home, the
// purpose would be Home)
enum Purpose {
  Work = 0;
  Home = 1;
  Shopping = 2;
  Leisure = 3;
  Social = 4;
  // There's a few more of these that seem to be standard in DaySim and such
}
